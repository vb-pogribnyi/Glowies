#version 460
#extension GL_GOOGLE_include_directive : enable         // To be able to use #include
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_EXT_ray_query : enable
#extension GL_KHR_shader_subgroup_basic : require       // Special extensions to debug groups, warps, SM, ...
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_scalar_block_layout : enable          // Usage of 'scalar' block layout

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "raycommon.glsl"
#include "random.glsl"
#include "host_device.h"

layout(location = 0) rayPayloadEXT hitPayloadSimpli prd;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay
{
  PushConstantRay rtxState;
};
layout(set = 1, binding = eObjDescs, scalar) buffer ObjDesc_ { ObjDesc i[]; } objDesc;
layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices {ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials {WaveFrontMaterial m[]; }; // Array of all materials on an object
layout(buffer_reference, scalar) buffer MatIndices {int i[]; }; // Material ID for each triangle


vec3 computeDiffuse(WaveFrontMaterial mat, vec3 lightDir, vec3 normal)
{
  // Lambertian
  float dotNL = max(dot(normal, lightDir), 0.0);
  vec3  c     = mat.diffuse * dotNL;
  if(mat.illum >= 1)
    c += 0.12 * mat.diffuse;    // Ambient color
  return c;
}

vec3 computeSpecular(WaveFrontMaterial mat, vec3 viewDir, vec3 lightDir, vec3 normal)
{
  if(mat.illum < 2)
    return vec3(0);

  // Compute specular only if not in shadow
  const float kPi        = 3.14159265;
  const float kShininess = max(mat.shininess, 4.0);

  // Specular
  const float kEnergyConservation = (2.0 + kShininess) / (2.0 * kPi);
  vec3        V                   = normalize(-viewDir);
  vec3        R                   = reflect(-lightDir, normal);
  float       specular            = kEnergyConservation * pow(max(dot(V, R), 0.0), kShininess);

  return vec3(mat.specular * specular);
}

bool isInside(rayQueryEXT rayQuery, int dstIllum, vec3 testPoint) {
  rayQueryEXT rayQueryCnt;
  rayQueryInitializeEXT(rayQueryCnt,     //
                        topLevelAS,   // acceleration structure
                        gl_RayFlagsNoneEXT,     // rayFlags
                        0xFF,         // cullMask
                        rayQueryGetWorldRayOriginEXT(rayQuery),     // ray origin
                        0.0,          // ray min range
                        rayQueryGetWorldRayDirectionEXT(rayQuery),  // ray direction
                        rayQueryGetIntersectionTEXT(rayQuery, false));    // ray max range
  
  while(rayQueryProceedEXT(rayQueryCnt))
  {
    if(rayQueryGetIntersectionTypeEXT(rayQueryCnt, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
    {
      ObjDesc    objResource = objDesc.i[rayQueryGetIntersectionInstanceCustomIndexEXT(rayQueryCnt, false)];
      MatIndices matIndices  = MatIndices(objResource.materialIndexAddress);
      Materials  materials   = Materials(objResource.materialAddress);
      int               matIdx = matIndices.i[rayQueryGetIntersectionPrimitiveIndexEXT(rayQueryCnt, false)];
      WaveFrontMaterial mat    = materials.m[matIdx];

      
      if(mat.illum == dstIllum) { 
        vec3 obj_position = vec3(rayQueryGetIntersectionWorldToObjectEXT(rayQueryCnt, false) * vec4(testPoint, 1));

        if (abs(obj_position.x) < 0.5 && abs(obj_position.y) < 0.5 && abs(obj_position.z) < 0.5) {
          return true;
        }
      }
    }
  }
  return false;
}

void trace(vec3 origin, vec3 direction, rayQueryEXT rayQuery) {
  rayQueryInitializeEXT(rayQuery,     //
                        topLevelAS,   // acceleration structure
                        gl_RayFlagsNoneEXT,     // rayFlags
                        0xFF,         // cullMask
                        origin,     // ray origin
                        0.0001,          // ray min range
                        direction,  // ray direction
                        INFINITY);    // ray max range
  
  // Start traversal: return false if traversal is complete
  while(rayQueryProceedEXT(rayQuery))
  {
    if(rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
    {
      // Object data
      ObjDesc    objResource = objDesc.i[rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false)];
      MatIndices matIndices  = MatIndices(objResource.materialIndexAddress);
      Materials  materials   = Materials(objResource.materialAddress);
      Indices    indices     = Indices(objResource.indexAddress);
      Vertices   vertices    = Vertices(objResource.vertexAddress);
      int               matIdx  = matIndices.i[rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false)];
      ivec3             ind     = indices.i[rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false)];
      WaveFrontMaterial mat    = materials.m[matIdx];

      // Vertex of the triangle
      Vertex v0 = vertices.v[ind.x];
      Vertex v1 = vertices.v[ind.y];
      Vertex v2 = vertices.v[ind.z];
      vec2       bary         = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);
      const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);

      // Computing the coordinates of the hit position
      const vec3 pos      = v0.pos * barycentrics.x + v1.pos * barycentrics.y + v2.pos * barycentrics.z;
      const vec3 worldPos = vec3(rayQueryGetIntersectionObjectToWorldEXT(rayQuery, false) * vec4(pos, 1.0));

      //////////////////////////////////////
      // Shell cross
      //////////////////////////////////////
      if(mat.illum == 4) {
        if (isInside(rayQuery, 8, worldPos)) {
          rayQueryConfirmIntersectionEXT(rayQuery);
        }
      }

      //////////////////////////////////////
      // Core cross
      //////////////////////////////////////
      else if(mat.illum == 8) {
        if (isInside(rayQuery, 4, worldPos)) {
          rayQueryConfirmIntersectionEXT(rayQuery);
        }
      }

      else rayQueryConfirmIntersectionEXT(rayQuery);  // The hit was opaque
    }
  }
}

vec3 getColor(WaveFrontMaterial mat, vec3 L, rayQueryEXT rayQuery, vec3 worldNrm) {
  float attenuation = 1;
  vec3  specular    = vec3(0);
  vec3 diffuse = computeDiffuse(mat, L, worldNrm);

  // Tracing shadow ray only if the light is visible from the surface
  if(dot(worldNrm, L) > 0)
  {
    float tMin   = 0.001;
    float tMax   = INFINITY;
    vec3  origin = rayQueryGetWorldRayOriginEXT(rayQuery) + rayQueryGetWorldRayDirectionEXT(rayQuery) * rayQueryGetIntersectionTEXT(rayQuery, true);
    
    rayQueryEXT rayQuerySHDW;
    trace(origin, L, rayQuerySHDW);

    bool hit = (rayQueryGetIntersectionTypeEXT(rayQuerySHDW, true) != gl_RayQueryCommittedIntersectionNoneEXT);
    if(hit)
    {
      attenuation = 0.3;
    }
    else
    {
      // Specular
      specular = computeSpecular(mat, rayQueryGetWorldRayDirectionEXT(rayQuery), L, worldNrm);
    }
  }

  return vec3(attenuation * (diffuse + specular));
}

vec3 tracePath(vec3 origin, vec3 direction, rayQueryEXT rayQuery) {
  int nBounces = 10;
  vec3 result = vec3(-1, -1, -1);
  bool isInsideTransparent = false;
  for (int i = 0; i < nBounces; i++) {
    trace(origin, direction, rayQuery);
    bool hit = (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT);
    if(hit)
    {
        // Object data
        ObjDesc    objResource = objDesc.i[rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true)];
        MatIndices matIndices  = MatIndices(objResource.materialIndexAddress);
        Materials  materials   = Materials(objResource.materialAddress);
        Indices    indices     = Indices(objResource.indexAddress);
        Vertices   vertices    = Vertices(objResource.vertexAddress);

        // Indices of the triangle
        ivec3 ind = indices.i[rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true)];

        // Vertex of the triangle
        Vertex v0 = vertices.v[ind.x];
        Vertex v1 = vertices.v[ind.y];
        Vertex v2 = vertices.v[ind.z];
        vec2       bary         = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
        const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);

        // Computing the normal at hit position
        const vec3 nrm      = v0.nrm * barycentrics.x + v1.nrm * barycentrics.y + v2.nrm * barycentrics.z;
        const vec3 worldNrm = normalize(vec3(nrm * rayQueryGetIntersectionWorldToObjectEXT(rayQuery, true)));  // Transforming the normal to world space

        int               matIdx = matIndices.i[rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true)];
        WaveFrontMaterial mat    = materials.m[matIdx];

        //////////////////////////////////////
        // Transparent material
        //////////////////////////////////////

        if (mat.transmittance.x > 0) {
          float tMin   = 0.001;
          float tMax   = INFINITY;
          origin = rayQueryGetWorldRayOriginEXT(rayQuery) + rayQueryGetWorldRayDirectionEXT(rayQuery) * rayQueryGetIntersectionTEXT(rayQuery, true);
          float eta = 1 / 1.4;
          vec3 nrm = worldNrm;
          isInsideTransparent = true;
          if (dot(worldNrm, rayQueryGetWorldRayDirectionEXT(rayQuery)) > 0) {
            isInsideTransparent = false;
            eta = 1 / eta;
            nrm = -1 * nrm;
          }
          direction = refract(rayQueryGetWorldRayDirectionEXT(rayQuery), nrm, eta);
          if (length(direction) == 0) direction = reflect(rayQueryGetWorldRayDirectionEXT(rayQuery), nrm);
        } else {
          result = getColor(mat, normalize(vec3(1, 0.7, 0.2)), rayQuery, worldNrm);
          break;
        }
    }
  }

  return result;

}

void main() 
{
  ivec2 imageRes    = rtxState.size;
  ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);
  uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

  uint rayFlags = gl_RayFlagsNoneEXT;
  prd.hitValue = vec3(0);
  prd.depth = 0;
  prd.isSkipAll = false;

  vec3 pixelColor = vec3(0, 0, 0);


  rayQueryEXT rayQuery;
  pixelColor = tracePath(origin.xyz, direction.xyz, rayQuery);

  // Debug - Heatmap
  if(rtxState.debugging_mode == eHeatmap)
  {
    uint64_t end  = clockRealtimeEXT();
    float    low  = rtxState.minHeatmap;
    float    high = rtxState.maxHeatmap;
    float    val  = clamp((float(end - start) - low) / (high - low), 0.0, 1.0);
    pixelColor    = temperature(val);
  }

  imageStore(image, imageCoords, vec4(pixelColor, 1.f));
}
